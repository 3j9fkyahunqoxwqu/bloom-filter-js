{"version":3,"sources":["../../src/util.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAO,MAAM,eAAe,GAAG,SAAlB,eAAe,CAAI,GAAG;WAAK,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,UAAA,CAAC;aAAI,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;KAAA,CAAC;GAAA,CAAC;;UAAnE,eAAe,GAAf,eAAe;;;;;AAMrB,MAAM,YAAY,GAAG,SAAf,YAAY,CAAI,CAAC;WAAK,UAAC,WAAW,EAAE,QAAQ,EAAE,YAAY,EAAK;AAC1E,aAAO,QAAQ;;AAEb,OAAC,QAAQ,GAAG,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,CAAA,GAAI,CAAC,GAAG,WAAW,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,GACzG,WAAW,CAAC,MAAM,CAAC,UAAC,KAAK,EAAE,CAAC,EAAE,CAAC;eAAK,KAAK,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,WAAW,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC;OAAA,EAAE,CAAC,CAAC,CAAC;KAC/F;GAAA,CAAA;;UALY,YAAY,GAAZ,YAAY;;;;AAUlB,MAAM,MAAM,GAAG,SAAT,MAAM,CAAI,MAAM,EAAE,WAAW;WACxC,MAAM,CAAC,WAAW,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,WAAW,GAAG,CAAC;GAAA,CAAC;;UADzC,MAAM,GAAN,MAAM;;;;AAMZ,MAAM,QAAQ,GAAG,SAAX,QAAQ,CAAI,MAAM,EAAE,WAAW;WAC1C,CAAC,EAAE,MAAM,CAAC,WAAW,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,WAAW,GAAG,CAAC,CAAA,AAAC;GAAA,CAAC;UAD5C,QAAQ,GAAR,QAAQ","file":"util.js","sourcesContent":["export const toCharCodeArray = (str) => str.split('').map(c => c.charCodeAt(0));\n\n/**\n * Returns a function that generates a Rabin fingerprint hash function\n * @param p The prime to use as a base for the Rabin fingerprint algorithm\n */\nexport const simpleHashFn = (p) => (arrayValues, lastHash, lastCharCode) => {\n  return lastHash ?\n    // See the abracadabra example: https://en.wikipedia.org/wiki/Rabin%E2%80%93Karp_algorithm\n    (lastHash - lastCharCode * Math.pow(p, arrayValues.length - 1)) * p + arrayValues[arrayValues.length - 1] :\n    arrayValues.reduce((total, x, i) => total + x * Math.pow(p, arrayValues.length - i - 1), 0);\n}\n\n/*\n * Sets the specific bit location\n */\nexport const setBit = (buffer, bitLocation) =>\n  buffer[bitLocation / 8 | 0] |= 1 << bitLocation % 8;\n\n/**\n * Returns true if the specified bit location is set\n */\nexport const isBitSet = (buffer, bitLocation) =>\n  !!(buffer[bitLocation / 8 | 0] & 1 << bitLocation % 8);\n"]}