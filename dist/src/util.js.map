{"version":3,"sources":["../../src/util.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAO,MAAM,eAAe,GAAG,SAAlB,eAAe,CAAI,GAAG;WAAK,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,UAAA,CAAC;aAAI,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;KAAA,CAAC;GAAA,CAAC;;UAAnE,eAAe,GAAf,eAAe;;;;AAKrB,MAAM,YAAY,GAAG,SAAf,YAAY,CAAI,CAAC;WAAK,UAAC,WAAW;aAC7C,WAAW,CAAC,WAAW,CAAC,UAAC,KAAK,EAAE,CAAC,EAAE,CAAC;eAAK,KAAK,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;OAAA,EAAE,CAAC,CAAC;KAAA;GAAA,CAAC;;UAD7D,YAAY,GAAZ,YAAY;;;;AAOlB,MAAM,MAAM,GAAG,SAAT,MAAM,CAAI,MAAM,EAAE,WAAW;WACxC,MAAM,CAAC,WAAW,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,WAAW,GAAG,CAAC;GAAA,CAAC;;UADzC,MAAM,GAAN,MAAM;;;;AAMZ,MAAM,QAAQ,GAAG,SAAX,QAAQ,CAAI,MAAM,EAAE,WAAW;WAC1C,CAAC,EAAE,MAAM,CAAC,WAAW,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,WAAW,GAAG,CAAC,CAAA,AAAC;GAAA,CAAC;UAD5C,QAAQ,GAAR,QAAQ","file":"util.js","sourcesContent":["export const toCharCodeArray = (str) => str.split('').map(c => c.charCodeAt(0));\n\n/**\n * Pass in a prime for a simple rolling hash function\n */\nexport const simpleHashFn = (p) => (arrayValues) =>\n  arrayValues.reduceRight((total, x, i) => total + x * Math.pow(p, i), 0);\n\n\n/*\n * Sets the specific bit location\n */\nexport const setBit = (buffer, bitLocation) =>\n  buffer[bitLocation / 8 | 0] |= 1 << bitLocation % 8;\n\n/**\n * Returns true if the specified bit location is set\n */\nexport const isBitSet = (buffer, bitLocation) =>\n  !!(buffer[bitLocation / 8 | 0] & 1 << bitLocation % 8);\n"]}